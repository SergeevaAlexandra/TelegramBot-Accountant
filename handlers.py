from aiogram import types, Router
from aiogram.filters import Command
import re

from database import DatBase

db = DatBase()

router = Router()


@router.message(Command("start"))
async def start_handler(message):
    """–ó–∞–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    chat_id = message.chat.id

    db.add_user(user_id, username, first_name, last_name, chat_id)

    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.')

@router.message(Command("info"))
async def info_handler(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–æ—Ç–µ–ª—å –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º """
    chat_id = message.chat.id

    user = db.send_info(chat_id)

    if user:
        username = user[2] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        first_name = user[3] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        last_name = user[4] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        await message.answer(f'–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\nUsername: @{username}')
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.')

@router.message(Command("delete"))
async def delete_handler(message):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    chat_id = message.chat.id

    db.remove_user(chat_id)

    await message.answer('–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–æ—Ç–∞.')

@router.message(Command("spent", "earned", "s", "e"))
async def start(message):
    """–°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∏ –¥–æ—Ö–æ–¥–∞—Ö"""
    cmd_variants = (('/spent', '/s', '!spent', '!s'), ('/earned', '/e', '!earned', '!e'))
    operation = '-' if message.text.startswith(cmd_variants[0]) else '+'

    value = message.text
    for i in cmd_variants:
        for j in i:
            value = value.replace(j, '').strip()

    if(len(value)):
        x = re.findall(r"\d+(?:.\d+)?", value)
        if(len(x)):
            value = float(x[0].replace(',', '.'))

            db.add_record(message.from_user.id, operation, value)

            if(operation == '-'):
                await message.reply("‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ <u><b>—Ä–∞—Å—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
            else:
                await message.reply("‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ <u><b>–¥–æ—Ö–æ–¥–µ</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É!")
    else:
        await message.reply("–ù–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!")

@router.message(Command("history", "h"))
async def start(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤"""
    cmd_variants = ('/history', '/h', '!history', '!h')
    within_als = {
        "day": ('today', 'day', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–Ω—å'),
        "month": ('month', '–º–µ—Å—è—Ü'),
        "year": ('year', '–≥–æ–¥'),
    }

    cmd = message.text
    for r in cmd_variants:
        cmd = cmd.replace(r, '').strip()

    within = 'day'
    if(len(cmd)):
        for k in within_als:
            for als in within_als[k]:
                if(als == cmd):
                    within = k

    records = db.get_records(message.from_user.id, within)

    if(len(records)):
        answer = f"üìÑ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {within_als[within][-1]}\n\n"

        for r in records:
            answer += "<b>" + ("‚ûñ –†–∞—Å—Ö–æ–¥" if not r[2] else "‚ûï –î–æ—Ö–æ–¥") + "</b>"
            answer += f" - {r[3]}"
            answer += f" <i>({r[4]})</i>\n"

        await message.reply(answer)
    else:
        await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")